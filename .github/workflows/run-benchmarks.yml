name: Run Prime Benchmarks

on:
  workflow_dispatch: # Allows manual triggering of the workflow

permissions:
  contents: write

jobs:
  run-benchmarks:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Create results directory
      - name: Create results directory
        run: mkdir -p results

      # Set up Java
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Original Java benchmark
      - name: Compile and run Java benchmark
        continue-on-error: true
        run: |
          touch results/java_result.json
          cd benchmarks/java
          javac PrimeBenchmark.java
          java PrimeBenchmark > ../../results/java_result.json

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # Original Python benchmark
      - name: Run Python benchmark
        continue-on-error: true
        run: |
          touch results/python_result.json
          python3 benchmarks/python/prime_benchmark.py > results/python_result.json

      # Install Node.js
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Original JavaScript benchmark
      - name: Run JavaScript benchmark
        continue-on-error: true
        run: |
          touch results/js_result.json
          node benchmarks/js/prime_benchmark.js > results/js_result.json

      # Install GCC
      - name: Install GCC
        run: sudo apt-get update && sudo apt-get install -y g++

      # Compile and run C++ benchmark with optimizations
      - name: Compile and run C++ benchmark
        continue-on-error: true
        run: |
          touch results/cpp_result.json
          g++ -O3 -march=native -flto -o benchmarks/cpp/PrimeBenchmark benchmarks/cpp/PrimeBenchmark.cpp
          ./benchmarks/cpp/PrimeBenchmark > results/cpp_result.json

      # Set up GraalVM
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          version: '22.3.1' # Specify the GraalVM version
          java-version: '17' # Use Java 17

      # Install Native Image
      - name: Install Native Image
        run: gu install native-image

      # Compile and run Java benchmark with GraalVM
      - name: Compile and run Java benchmark with GraalVM
        continue-on-error: true
        run: |
          touch results/java_graalvm_result.json
          cd benchmarks/java
          javac PrimeBenchmark.java
          java PrimeBenchmark > ../../results/java_graalvm_result.json

      # Compile and run Java benchmark with GraalVM Native Image
      - name: Compile and run Java benchmark with GraalVM Native Image
        continue-on-error: true
        run: |
          touch results/java_graalvm_native_image_result.json
          cd benchmarks/java
          javac PrimeBenchmark.java
          native-image --no-fallback PrimeBenchmark
          cd ../../
          ./benchmarks/java/primebenchmark > results/java_graalvm_native_image_result.json

      # Set up PyPy
      - name: Set up PyPy
        uses: actions/setup-python@v4
        with:
          python-version: 'pypy3.10'

      # Run Python benchmark with PyPy
      - name: Run Python benchmark with PyPy
        continue-on-error: true
        run: |
          touch results/python_pypy_result.json
          pypy3 benchmarks/python/prime_benchmark.py > results/python_pypy_result.json

      # Install GraalVM Node.js Support
      - name: Install GraalVM Node.js
        run: gu install nodejs

      # Run JavaScript benchmark with GraalVM Node.js
      - name: Run JavaScript benchmark with GraalVM Node.js
        continue-on-error: true
        run: |
          touch results/js_graalvm_result.json
          node benchmarks/js/prime_benchmark.js > results/js_graalvm_result.json

      # Generate Markdown Report
      - name: Generate Markdown Report
        run: |
          javac MarkdownGenerator.java
          java MarkdownGenerator

      # Commit results
      - name: Commit results
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add results_summary.md
          git commit -m "Update benchmark results"
          git push
